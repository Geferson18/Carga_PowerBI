// <auto-generated />
using System;
using Billycock_MS_Reusable.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Billycock_MS_Reusable.Migrations
{
    [DbContext(typeof(BillycockServiceContext))]
    [Migration("20230514042838_Table_State_Changed")]
    partial class Table_State_Changed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.Account", b =>
                {
                    b.Property<int>("idAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAccount"));

                    b.Property<string>("diminutive")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("idState")
                        .HasColumnType("int");

                    b.HasKey("idAccount");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.Platform", b =>
                {
                    b.Property<int>("idPlatform")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPlatform"));

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("highPrice")
                        .HasColumnType("int");

                    b.Property<int>("idState")
                        .HasColumnType("int");

                    b.Property<int>("lowPrice")
                        .HasColumnType("int");

                    b.Property<int>("numberMaximumUsers")
                        .HasColumnType("int");

                    b.HasKey("idPlatform");

                    b.ToTable("PLATFORM");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.PlatformAccount", b =>
                {
                    b.Property<int>("idPlatform")
                        .HasColumnType("int");

                    b.Property<int>("idAccount")
                        .HasColumnType("int");

                    b.Property<int>("GuiID")
                        .HasColumnType("int");

                    b.Property<int>("freeUsers")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("payDate")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("idPlatform", "idAccount");

                    b.HasIndex("idAccount");

                    b.ToTable("PLATFORMACCOUNT");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.User", b =>
                {
                    b.Property<int>("idUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idUser"));

                    b.Property<string>("billing")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("idState")
                        .HasColumnType("int");

                    b.Property<string>("inscriptionDate")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("pay")
                        .HasColumnType("int");

                    b.HasKey("idUser");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.UserPlatform", b =>
                {
                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.Property<int>("idPlatform")
                        .HasColumnType("int");

                    b.Property<int>("GuiID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("idUser", "idPlatform");

                    b.HasIndex("idPlatform");

                    b.ToTable("USERPLATFORM");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.UserPlatformAccount", b =>
                {
                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.Property<int>("idPlatform")
                        .HasColumnType("int");

                    b.Property<int>("idAccount")
                        .HasColumnType("int");

                    b.Property<int>("GuiID")
                        .HasColumnType("int");

                    b.Property<string>("pin")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("idUser", "idPlatform", "idAccount", "GuiID");

                    b.HasIndex("idAccount");

                    b.HasIndex("idPlatform");

                    b.ToTable("USERPLATFORMACCOUNT");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Utils.Audit", b =>
                {
                    b.Property<int>("idAudit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAudit"));

                    b.Property<string>("AuditMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("integration")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("idAudit");

                    b.ToTable("AUDIT");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Utils.Correlative", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("idPlatformAccount")
                        .HasColumnType("int");

                    b.Property<int>("idUserPlatform")
                        .HasColumnType("int");

                    b.Property<int>("idUserPlatformAccount")
                        .HasColumnType("int");

                    b.HasKey("guid");

                    b.ToTable("CORRELATIVE");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Utils.History", b =>
                {
                    b.Property<int>("idHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idHistory"));

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("integration")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("idHistory");

                    b.ToTable("HISTORY");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Utils.State", b =>
                {
                    b.Property<int>("idState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idState"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("idState");

                    b.ToTable("STATE");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Utils.TokenUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("accessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("lockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TOKENUSER");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.PlatformAccount", b =>
                {
                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.Account", "Account")
                        .WithMany("platformAccounts")
                        .HasForeignKey("idAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.Platform", "Platform")
                        .WithMany("platformAccounts")
                        .HasForeignKey("idPlatform")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.UserPlatform", b =>
                {
                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.Platform", "Platform")
                        .WithMany("userPlatforms")
                        .HasForeignKey("idPlatform")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.User", "User")
                        .WithMany("userPlatforms")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.UserPlatformAccount", b =>
                {
                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.Account", "Account")
                        .WithMany("userPlatformAccounts")
                        .HasForeignKey("idAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.Platform", "Platform")
                        .WithMany("userPlatformAccounts")
                        .HasForeignKey("idPlatform")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Billycock_MS_Reusable.Models.Billycock.User", "User")
                        .WithMany("userPlatformAccounts")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.Account", b =>
                {
                    b.Navigation("platformAccounts");

                    b.Navigation("userPlatformAccounts");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.Platform", b =>
                {
                    b.Navigation("platformAccounts");

                    b.Navigation("userPlatformAccounts");

                    b.Navigation("userPlatforms");
                });

            modelBuilder.Entity("Billycock_MS_Reusable.Models.Billycock.User", b =>
                {
                    b.Navigation("userPlatformAccounts");

                    b.Navigation("userPlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
